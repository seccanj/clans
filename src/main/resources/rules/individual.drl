import org.seccanj.clans.configuration.Configuration;
import org.seccanj.clans.model.World;
import org.seccanj.clans.model.being.Being;
import org.seccanj.clans.model.being.Food;
import org.seccanj.clans.model.being.Individual;
import org.seccanj.clans.model.being.Plant;
import org.seccanj.clans.model.movement.Cell;
import org.seccanj.clans.model.movement.Direction;
import org.seccanj.clans.model.movement.Direction.Directions;
import org.seccanj.clans.model.movement.Position;
import org.seccanj.clans.model.movement.RelativeCell;
import org.seccanj.clans.model.control.ActionDone;
import org.seccanj.clans.model.control.BeingFilterFactory;
import org.seccanj.clans.model.control.EndOfTurn;
import org.seccanj.clans.model.control.Experience;
import org.seccanj.clans.model.control.Parent;
import org.seccanj.clans.util.Utils;


rule "Living" salience 10
    when
        $individual : Individual( actionPoints >= 1 )
        
        $world : World()

    then
        //System.out.println("Living: "+$individual.getName());
        
        modify ( $individual ) {
        	useActionPoints( 1 )
        };

        modify ( $individual ) {
        	useEnergy( 1 )
        };

end

rule "Find food" salience 60
    when
        $individual : Individual( hasState("hungry"), target == null, $position : position )

        not ActionDone( being == $individual, actionTypeName == "setTarget" )

        $world : World()
        
		$targetCell: RelativeCell( valid ) from $world.scanFirst2( BeingFilterFactory.getFilter("beingType", "plant"), $position, $individual.sightDistance )
		
    then
        System.out.println("Setting target for "+$individual.toString());
        
        modify ( $individual ) {
        	setTarget( $targetCell )
        };

        modify ( $individual ) {
        	addState("moving")
        };

		insert(	new ActionDone( $individual, "setTarget" ) );

end

rule "Move to target" salience 50
    when
        $individual : Individual(actionPoints >= 5, energy >= maxSpeed / 2, hasState("moving"), target != null, $position : position, $target : target)

        $newPosition : Position() from $target.position
        
    then
        System.out.println("Moving to target ");

        modify ( $individual ) {
        	moveTo( $newPosition, $individual.maxSpeed )
        };

        modify ( $individual ) {
        	useActionPoints( 5 )
        };
		
        modify ( $individual ) {
        	useEnergy( $individual.maxSpeed / 2 )
        };

end

rule "Reached target" salience 65
    when
        $individual : Individual(hasState("moving"), target != null, position.isAdjacent(target.position))

    then
        System.out.println("Reached target");

        modify ( $individual ) {
        	removeState( "moving" )
        };

        modify ( $individual ) {
        	setTarget( null )
        };

end

rule "Eat poisoned plant" 
	salience 100
    activation-group "eating"
    
    when
        $individual : Individual( $position : position, hasState("hungry") )
        
        $adjacentPosition : Position() from $position.getAdjacentPositions()
        
        $plant : Plant( position.equals($adjacentPosition), hasCharacteristics('red', 'bitter'), $plantPosition : position )
        
        not Experience( bearer == $individual, actionTypeName == "eat", !good, hasCharacteristics( $plant.getCharacteristics() ) )
        
        $world : World()
        
    then
        System.out.println("Eating poisoned plant. Individual: "+$individual.getName()+", plant position: "+$plantPosition.toString());
        
        modify ( $individual ) {
        	eat( $plant )
        }

		insert ( $individual.getLastActionDone() );

        modify ( $individual ) {
        	decreaseHealth( $plant.getFoodHealth() )
        }

		insert ( $individual.getLastActionDone() );

        modify ( $world ) {
        	removeEntity( $plant )
        }

		delete ( $plant );

end

rule "Eat plant"
	salience 95
    activation-group "eating"

    when
        $individual : Individual( $position : position, hasState("hungry") )
        
        $adjacentPosition : Position() from $position.getAdjacentPositions()
        
        $plant : Plant( position.equals($adjacentPosition), $plantPosition : position )
        
        not Experience( bearer == $individual, actionTypeName == "eat", !good, hasCharacteristics( $plant.getCharacteristics() ) )
        
        $world : World()
        
    then
        System.out.println("Eating plant. Individual: "+$individual.getName()+", plant position: "+$plantPosition.toString());
        
        modify ( $individual ) {
        	eat( $plant )
        }

		insert ( $individual.getLastActionDone() );

        modify ( $individual ) {
        	removeState( "hungry" )
        }

        modify ( $world ) {
        	removeEntity( $plant )
        }

		delete ( $plant );

end

rule "Starvation" 
	salience 72
	activation-group "health"
	
    when
        $individual : Individual( energy <= (maxEnergy * 2 / 5) )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( being == $individual, actionTypeName == "starving" )

    then
        System.out.println("Becoming hungry "+$individual.toString());

        modify ( $individual ) {
        	decreaseHealth( 3 )
        };

        modify ( $individual ) {
        	removeState( "mating" )
        };

        modify ( $individual ) {
        	addState( "hungry" )
        };

        modify ( $individual ) {
        	setTarget( null )
        };

		insert(	new ActionDone( $individual, "starving" ) );

end

rule "Hungry" 
	salience 70
	activation-group "health"
	
    when
        $individual : Individual( energy <= (maxEnergy * 3 / 5), !hasState('hungry') )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( being == $individual, actionTypeName == "starving" )

    then
        System.out.println("Starving "+$individual.toString());

        modify ( $individual ) {
        	removeState( "moving" )
        };

        modify ( $individual ) {
        	removeState( "mating" )
        };

        modify ( $individual ) {
        	addState( "hungry" )
        };

        modify ( $individual ) {
        	setTarget( null )
        };

		insert(	new ActionDone( $individual, "starving" ) );

end

rule "Recovering" 
	salience 68
	activation-group "health"
	
    when
        $individual : Individual( health < maxHealth, energy >= (maxEnergy * 3 / 5) )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( being == $individual, actionTypeName == "recovering" )

    then
        System.out.println("Recovering "+$individual.toString());

        modify ( $individual ) {
        	increaseHealth( 2 )
        };

        modify ( $individual ) {
        	removeState( "hungry" )
        };

		insert(	new ActionDone( $individual, "recovering" ) );

end

rule "Learn" salience 30
    when
        $cause : ActionDone( actionTypeName == "eat", $individual : being, $causeTurn : turn )
        
        $effect : ActionDone( actionTypeName == "decreaseHealth", being == $individual, turn >= $causeTurn && turn < $causeTurn + 2 )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( being == $individual, actionTypeName == "learn" )

    then
        System.out.println("Learning "+$individual.toString());

		insert(	new Experience( false, $individual, "eat", $cause.getCharacteristics() ) );

		insert(	new ActionDone( $individual, "mating" ) );

end

rule "Mating" salience 30
    when
        $individual : Individual( age >= 100, !hasStates("mating", "moving", "hungry"), energy >= 200 )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( being == $individual, actionTypeName == "mating" )

    then
        System.out.println("Mating "+$individual.toString());

        modify ( $individual ) {
        	addState( "mating" )
        };

		insert(	new ActionDone( $individual, "mating" ) );

end

rule "Find partner" salience 30
    when
        $individual : Individual( hasState("mating"), target == null, $position : position )

        not ActionDone( being == $individual, actionTypeName == "setTarget" )

        $world : World()
        
		$targetCell: RelativeCell( valid ) from $world.scanFirst2( BeingFilterFactory.getFilter("partner", $individual), $position, $individual.sightDistance )
		
    then
        System.out.println("Setting mating target for "+$individual.toString());
        
        modify ( $individual ) {
        	setTarget( $targetCell )
        };

        modify ( $individual ) {
        	addState("moving")
        };

		insert(	new ActionDone( $individual, "setTarget" ) );

end

rule "Generate" salience 30
    when
        $individual : Individual( energy > 200, hasState("mating"), $position : position)
        
        not ActionDone( being == $individual, actionTypeName == "generate" )
        
        $adjacentPosition : Position() from $position.getAdjacentPositions()
        
        $otherIndividual : Individual( position.equals($adjacentPosition), energy > 200 )
        
        $world : World()
        
    then
        System.out.println("Generating with " + $otherIndividual.toString());
        
        modify ( $world ) {
        	generateEntityNear( "individual", $individual.position, $individual, $otherIndividual )
        }

        modify ( $individual ) {
        	removeState("mating")
        };

        modify ( $individual ) {
        	useEnergy( 20 )
        }

        modify ( $otherIndividual ) {
        	useEnergy( 200 )
        }

		insert(	new ActionDone( $individual, "generate" ) );

end

rule "Tutoring" salience 20
    when
    	$individual : Individual()
    	
        $parent : Parent( child == $individual )
        
		Experience ( bearer == $parent.parent, $good : good, $actionTypeName : actionTypeName, $characteristics : characteristics )

		not Experience ( bearer == $individual, good == $good, actionTypeName == $actionTypeName, hasCharacteristics( $characteristics ) )
        
        exists EndOfTurn( individual == $individual )

    then
        System.out.println("Tutoring from parent "+$parent.getParent().getName()+" to child "+$individual.toString());

		insert(	new Experience( $good, $individual, $actionTypeName, $characteristics ) );
end

rule "Individual end of turn" salience 80
    when
        $individual : Individual( actionPoints == 0 || energy <= 0 )
        
        not EndOfTurn( individual == $individual )

    then
        // System.out.println("End of turn for "+$individual.toString());

        modify ( $individual ) {
        	useEnergy( 1 )
        };

		insert(	new EndOfTurn( $individual ) );

end

rule "Death" salience 100
    when
        $individual : Individual( health <= 0 )

        $world : World()

    then
        System.out.println("Removing dead individual " + $individual.toString());
        
        modify ( $world ) {
        	removeEntity( $individual )
        };

        delete ( $individual );

end

query "All Individuals"
    $individual : Individual()
end

query "All Plants"
    $plant : Plant()
end

query "End of turns"
    $endOfTurn : EndOfTurn()
end

query "Action dones"
    $actionDone : ActionDone()
end

