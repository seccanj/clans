import org.seccanj.clans.ClansJavaFx;
import org.seccanj.clans.configuration.Configuration;
import org.seccanj.clans.model.Being;
import org.seccanj.clans.model.Cell;
import org.seccanj.clans.model.RelativeCell;
import org.seccanj.clans.model.World;
import org.seccanj.clans.model.Position;
import org.seccanj.clans.model.Direction;
import org.seccanj.clans.model.Food;
import org.seccanj.clans.model.Direction.Directions;
import org.seccanj.clans.model.entities.Individual;
import org.seccanj.clans.model.entities.Plant;
import org.seccanj.clans.model.control.EndOfTurn;
import org.seccanj.clans.model.control.ActionDone;
import org.seccanj.clans.util.Utils;


rule "Living"
    when
        $individual : Individual( actionPoints >= 1, target == null )
        
        $world : World()

    then
        System.out.println("Living: "+$individual.getName());
        
        modify ( $individual ) {
        	useActionPoints( 1 )
        };

end

rule "Find food"
    when
        $individual : Individual( hasState("hungry"), target == null, $position : position )

        not ActionDone( individual == $individual, actionType == "setTarget" )

        $world : World()
        
		$targetCell: RelativeCell( valid ) from $world.scanFirst2( "plant", $position, $individual.sightDistance )
		
    then
        System.out.println("Setting target for "+$individual.toString());
        
        modify ( $individual ) {
        	setTarget( $targetCell )
        };

        modify ( $individual ) {
        	addState("moving")
        };

		insert(	new ActionDone( $individual, "setTarget" ) );

end

rule "Move to target"
    when
        $individual : Individual(actionPoints >= 5, energy >= maxSpeed / 2, hasState("moving"), target != null, $position : position, $target : target)

        $newPosition : Position() from $target.position
        
    then
        System.out.println("Moving to target ");

        modify ( $individual ) {
        	moveTo( $newPosition, $individual.maxSpeed )
        };

        modify ( $individual ) {
        	useActionPoints( 5 )
        };
		
        modify ( $individual ) {
        	useEnergy( $individual.maxSpeed / 2 )
        };

end

rule "Reached target"
    when
        $individual : Individual(hasState("moving"), target != null, position.isAdjacent(target.position))

    then
        System.out.println("Reached target");

        modify ( $individual ) {
        	removeState( "moving" )
        };

        modify ( $individual ) {
        	setTarget( null )
        };

end

rule "Eat plant"
    when
        $individual : Individual($position : position)
        
        $adjacentPosition : Position() from $position.getAdjacentPositions()
        
        $plant : Plant( position.equals($adjacentPosition), $plantPosition : position )
        
        $world : World()
        
    then
        System.out.println("Eating plant in "+$plantPosition.toString());
        
        modify ( $individual ) {
        	eat( $plant )
        }

        modify ( $individual ) {
        	addEnergy( $plant.energy )
        }

        modify ( $world ) {
        	removeEntity( $plant )
        }

		delete ( $plant )

end

rule "Starvation"
    when
        $individual : Individual( energy <= (maxEnergy * 4 / 5) )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( individual == $individual, actionType == "starvation" )

    then
        System.out.println("Starving "+$individual.toString());

        modify ( $individual ) {
        	decreaseHealth( 1 )
        };

        modify ( $individual ) {
        	removeState( "mating" )
        };

        modify ( $individual ) {
        	addState( "hungry" )
        };

        modify ( $individual ) {
        	setTarget( null )
        };

		insert(	new ActionDone( $individual, "starvation" ) );

end

rule "Recovering"
    when
        $individual : Individual( health < maxHealth, energy >= maxEnergy / 2 )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( individual == $individual, actionType == "recovering" )

    then
        System.out.println("Recovering "+$individual.toString());

        modify ( $individual ) {
        	increaseHealth( 1 )
        };

        modify ( $individual ) {
        	removeState( "hungry" )
        };

		insert(	new ActionDone( $individual, "recovering" ) );

end

rule "Mating"
    when
        $individual : Individual( age >= 100, !hasState("mating"), !hasState("moving"), !hasState("hungry") )
        
        exists EndOfTurn( individual == $individual )
        
        not ActionDone( individual == $individual, actionType == "mating" )

    then
        System.out.println("Mating "+$individual.toString());

        modify ( $individual ) {
        	addState( "mating" )
        };

		insert(	new ActionDone( $individual, "mating" ) );

end

rule "Find partner"
    when
        $individual : Individual( hasState("mating"), target == null, $position : position )

        not ActionDone( individual == $individual, actionType == "setTarget" )

        $world : World()
        
		$targetCell: RelativeCell( valid ) from $world.scanFirst2( "individual", $position, $individual.sightDistance )
		
    then
        System.out.println("Setting mating target for "+$individual.toString());
        
        modify ( $individual ) {
        	setTarget( $targetCell )
        };

        modify ( $individual ) {
        	addState("moving")
        };

		insert(	new ActionDone( $individual, "setTarget" ) );

end

rule "Generate"
    when
        $individual : Individual( energy > 20, hasState("mating"), $position : position)
        
        not ActionDone( individual == $individual, actionType == "generated" )
        
        $adjacentPosition : Position() from $position.getAdjacentPositions()
        
        $otherIndividual : Individual( position.equals($adjacentPosition), energy > 20 )
        
        $world : World()
        
    then
        System.out.println("Generating with " + $otherIndividual.toString());
        
        modify ( $world ) {
        	generateEntityNear( "individual", $individual.position, $individual, $otherIndividual )
        }

        modify ( $individual ) {
        	removeState("mating")
        };

        modify ( $individual ) {
        	useEnergy( 20 )
        }

        modify ( $otherIndividual ) {
        	useEnergy( 20 )
        }

		insert(	new ActionDone( $individual, "generated" ) );

end

rule "Individual end of turn"
    when
        $individual : Individual( actionPoints == 0 || energy <= 0 )
        
        not EndOfTurn( individual == $individual )

    then
        System.out.println("End of turn for "+$individual.toString());

        modify ( $individual ) {
        	useEnergy( 1 )
        };

		insert(	new EndOfTurn( $individual ) );

end

rule "Teardown"
    when
        $individual : Individual( health <= 0 )

        $world : World()

    then
        System.out.println("Removing dead individual " + $individual.toString());
        
        modify ( $world ) {
        	removeEntity( $individual )
        };

        delete ( $individual );

end

query "All Individuals"
    $individual : Individual()
end

query "All Plants"
    $plant : Plant()
end

query "End of turns"
    $endOfTurn : EndOfTurn()
end

query "Action dones"
    $actionDone : ActionDone()
end

